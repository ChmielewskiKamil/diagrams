@startuml
title Where does the yield come from?

/' //////////////////////////////////////////////////////////////////
//                      System Participants                        //
////////////////////////////////////////////////////////////////// '/

participant "bHermes (Deposit Only ERC4626)" as bHermes
participant "Uniswap V3" as UniswapV3
participant "Non Fungible Position Manager" as NonFungiblePositionManager 

actor "User" as User
participant "Multi Rewards Depot" as MultiRewardsDepot
note over MultiRewardsDepot : Depot is created during\nGauge deployment

participant "FlywheelBribeRewards" as FlywheelBribeRewards
participant "FlywheelCore" as FlywheelCore
participant "Uniswap V3 Staker" as UniswapV3Staker
participant "bHermesBoost" as bHermesBoost
participant "bHermesGauges" as bHermesGauges
participant "Uniswap V3 Gauge" as UniswapV3Gauge
participant "FlywheelGaugeRewards" as FlywheelGaugeRewards
participant "Base V2 Minter" as BaseV2Minter

/' //////////////////////////////////////////////////////////////////
//                         Interactions                            //
////////////////////////////////////////////////////////////////// '/
'Numbers are in the A.B.C format, by calling `inc A` you will increase the first number by 1'
autonumber 1.1.1
group HERMES tokens distribution in the protocol
    UniswapV3Gauge -> UniswapV3Gauge : Protocol team calls //newEpoch()// every week\nOn the BaseV2GaugeManager
    activate UniswapV3Gauge
    UniswapV3Gauge -> FlywheelGaugeRewards : Call //getAccruedRewards()//
    activate FlywheelGaugeRewards
    FlywheelGaugeRewards -> BaseV2Minter : Call //updatePeriod()//
    activate BaseV2Minter
    BaseV2Minter -[#blue]> BaseV2Minter : Mint HERMES once per cycle (1 week)\nfor previous week rewards
    BaseV2Minter -[#blue]> BaseV2Minter : Transfer //_growth// to Vault\n**WHAT VAULT?** 
    BaseV2Minter -[#blue]> BaseV2Minter : If DAO is present, transfer //share// to DAO
    BaseV2Minter -> FlywheelGaugeRewards : Try calling //queueRewardsForCycle()//
    activate FlywheelGaugeRewards
    FlywheelGaugeRewards -> BaseV2Minter : Call //getRewards()// to trigger the transfer
    BaseV2Minter -[#blue]> FlywheelGaugeRewards : Transfer //newWeeklyEmission// of HERMES tokens for rewards 
    FlywheelGaugeRewards -> FlywheelGaugeRewards : _queueRewards for the next cycle\nCalculate gauge allocation
    deactivate BaseV2Minter
    deactivate FlywheelGaugeRewards
    FlywheelGaugeRewards -[#blue]> UniswapV3Gauge : Transfer //accruedRewards// 
    deactivate FlywheelGaugeRewards
    UniswapV3Gauge -> UniswapV3Gauge : Call //distribute(accruedRewards)//
    UniswapV3Gauge -[#blue]> UniswapV3Staker : Call //creativeIncentiveFromGauge()//
    deactivate UniswapV3Gauge
end

autonumber inc A
group Providing liquidity to Uniswap V3
    User -[#orange]> UniswapV3 : Provide liquidity (for ex. ETH/DAI)
    UniswapV3 -> NonFungiblePositionManager : **How does the uniswap part works?** 
    NonFungiblePositionManager -[#purple]> User : Uniswap V3 NFT
end

autonumber inc A
group Staking NFT in the UniswapV3Staker
    User -[#purple]> UniswapV3Staker : Stake Uniswap V3 NFT: //stakeToken()//
    activate UniswapV3Staker
    UniswapV3Staker -> UniswapV3Gauge : Attach User to Gauge: //attachUser(tokenOwner)//
    UniswapV3Gauge -> bHermesBoost : Attach User's boost to Gauge: //attach(user)//
    deactivate UniswapV3Staker
end

...
... **Some time has to pass to get the rewards** ...
...

autonumber inc A
group Claiming HERMES rewards (Liquidity Providers)
    User -> UniswapV3Staker : Unstake Uniswap V3 NFT
    UniswapV3Staker -> NonFungiblePositionManager : Call the collect() with the Bribes contract as Recipient
    NonFungiblePositionManager -[#orange]> MultiRewardsDepot : Transfer ETH/DAI fees
    UniswapV3Staker -> UniswapV3Staker : Calculate User's rewards (in Hermes?)\nusing //RewardMath// library 
    User -> UniswapV3Staker : Claim all rewards: //claimAllRewards(addr to)//
    UniswapV3Staker -[#blue]> User : Transfer Hermes token rewards
end

autonumber inc A
group Bribe rewards
    User -> bHermesGauges : Call: //incrementGauge(gauge, weight)//
    bHermesGauges -> UniswapV3Gauge : Call //accrueBribes()//
    UniswapV3Gauge -> FlywheelCore : Call //accrue(gauge, user)//
    FlywheelCore -> FlywheelCore : Call //_getAccruedRewards()//
    FlywheelCore -> FlywheelBribeRewards : Call //getAccruedRewards()//
    FlywheelBribeRewards -> FlywheelBribeRewards : Hook: //getNextCycleRewards//
    FlywheelBribeRewards -> MultiRewardsDepot : Trigger reward transfer: //getRewards()//
    MultiRewardsDepot -[#orange]> FlywheelBribeRewards : Transfer rewards **(ETH/DAI???)** for distribution

end

autonumber inc A
group Burning HERMES for bHermes
    User -[#blue]> bHermes : Deposit (burn) 1000 Hermes tokens
    bHermes -[#red]> User : Mint 1000 bHermes tokens
end

autonumber inc A
group Claiming utilities with bHermes
    User -> bHermes : Claim utility tokens for 1000 bHermes
    bHermes -[#green]> User : 1000 Boost tokens, 1000 Votes tokens, 1000 Weight tokens
end

/' //////////////////////////////////////////////////////////////////
//                            Legend                               //
////////////////////////////////////////////////////////////////// '/

legend
    == Legend ==
    <font color=orange>Orange</font> - Tokens supplied to the UniV3 pool
    <font color=purple>Purple</font> - UniV3 NFT flow
    <font color=blue>Blue</font> - HERMES Tokens flow
    <font color=red>Red</font> - bHERMES Tokens flow
    <font color=green>Green</font> - Utility Tokens flow
endlegend

/' //////////////////////////////////////////////////////////////////
//                            Styling                              //
////////////////////////////////////////////////////////////////// '/

skinparam sequenceMessageAlign center
skinparam note {
    BorderColor black
    BackgroundColor white
    FontColor black
}
skinparam participant {
    FontSize 25
    BackgroundColor lightgray
}

footer Hermes: Contract Interactions - PlantUML diagram | author: @kamilchmielu
@enduml
